# Use the latest 2.1 version of CircleCI pipeline process engine.
# See: https://circleci.com/docs/2.0/configuration-reference
version: 2.1

# Define a job to be invoked later in a workflow.
# See: https://circleci.com/docs/2.0/configuration-reference/#jobs
# jobs:
#   say-hello:
    # Specify the execution environment. You can specify an image from Dockerhub or use one of our Convenience Images from CircleCI's Developer Hub.
    # See: https://circleci.com/docs/2.0/configuration-reference/#docker-machine-macos-windows-executor
    # docker:
    #   - image: cimg/base:stable
    # Add steps to the job
    # See: https://circleci.com/docs/2.0/configuration-reference/#steps
    # steps:
    #   - checkout
    #   - run:
    #       name: "Say hello"
    #       command: "echo Hello, World!"
    
commands:
  print_pipeline_ids:
    steps:
      - run: echo ${CIRCLE_WORKFLOW_ID}

jobs:
  save_hello_world_output:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - run: echo "hello world" > ~/output.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - output.txt

  print_output_file:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - attach_workspace:
          at: ~/
      - run: cat ~/output.txt
  
  print_pipeline_id:
    docker:
      - image: circleci/node:13.8.0
    environment: 
      CIRCLE_WORKFLOW_ID: My pipeline id is << pipeline.number >>
    steps:
      - run: echo "My pipeline id is << pipeline.id >>"
      - run: echo $CIRCLE_WORKFLOW_ID
  
  # print_error_message:
  #   docker:
  #     - image: circleci/node:13.8.0
  #   steps:
  #     - run:
  #         name: Testing application
  #         command: make test
  #         shell: /bin/bash
  #         working_directory: ~/my-app
  #         no_output_timeout: 30m
  #         environment:
  #           FOO: bar

  #     - run: echo 127.0.0.1 devhost | sudo tee -a /etc/hosts

  #     - run: |
  #         sudo -u root createuser -h localhost --superuser ubuntu &&
  #         sudo createdb -h localhost test_db

  #     - run:
  #         name: Upload Failed Tests
  #         command: curl --data fail_tests.log http://example.com/error_logs
  #         when: on_fail
  my_jobb:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - run: exit 1
      - run:
          name: on error
          command: echo "Hello Error!"
          when: on_fail
  
  my_job:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - print_pipeline_ids
# Invoke jobs via workflows
# See: https://circleci.com/docs/2.0/configuration-reference/#workflows
# workflows:
#   say-hello-workflow:
#     jobs:
#       - say-hello

workflows:
  my_workflow:
    jobs:
      - save_hello_world_output
      - print_output_file:
          requires:
            - save_hello_world_output
      - print_pipeline_id
      - my_job
      - my_jobb
          
